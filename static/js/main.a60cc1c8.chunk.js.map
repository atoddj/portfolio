{"version":3,"sources":["Letter.js","dictionary.js","Hangman.js","App.js","serviceWorker.js","index.js"],"names":["Letter","className","this","props","data","letter","Component","dictionary","alphabetObject","split","map","item","guessed","Hangman","state","guesses","word","randomWord","Math","floor","random","length","guessValue","errorMessage","wrongGuesses","maxWrongGuesses","victory","handleChange","bind","handleSubmit","resetGame","event","currGuess","toLowerCase","result","find","correctStatus","findIndex","el","setState","prevState","preventDefault","target","value","correctLetters","document","querySelectorAll","i","innerText","join","style","color","lose","win","onSubmit","type","onChange","maxLength","onKeyUp","handleKeyUp","disabled","l","onClick","displayHeading","displayGuesses","displayForm","generateWord","displayGameOver","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a60cc1c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Letter.css';\r\n\r\nclass Letter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"letter\">\r\n                {this.props.data.letter}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Letter;","const dictionary = [\r\n    \"adjacent\",\r\n\"dimension\",\r\n\"obedient\",\r\n\"accumulate\",\r\n\"drastic\",\r\n\"oblivious\",\r\n\"adapt\",\r\n\"elaborate\",\r\n\"origin\",\r\n\"adequate\",\r\n\"encourage\",\r\n\"peculiar\",\r\n\"analyze\",\r\n\"equation\",\r\n\"persuade\",\r\n\"anticipate\",\r\n\"evaluate\",\r\n\"prediction\",\r\n\"appropriate\",\r\n\"exaggerate\",\r\n\"priority\",\r\n\"artifact\",\r\n\"exhaust\",\r\n\"quote\",\r\n\"benefit\",\r\n\"expression\",\r\n\"realistic\",\r\n\"calculate\",\r\n\"extend\",\r\n\"recount\",\r\n\"catastrophe\",\r\n\"extensive\",\r\n\"reinforce\",\r\n\"chronological\",\r\n\"factor\",\r\n\"repetition\",\r\n\"citizen\",\r\n\"ferocious\",\r\n\"retrieve\",\r\n\"civilization\",\r\n\"frequent\",\r\n\"frequency\",\r\n\"compose\",\r\n\"genuine\",\r\n\"solution\",\r\n\"conclusion\",\r\n\"government\",\r\n\"strategy\",\r\n\"congruent\",\r\n\"history\",\r\n\"substitute\",\r\n\"consequence\",\r\n\"hypothesis\",\r\n\"suspense\",\r\n\"construct\",\r\n\"insists\",\r\n\"tentative\",\r\n\"continuous\",\r\n\"irrigate\",\r\n\"thesis\",\r\n\"contrast\",\r\n\"lofty\",\r\n\"transfer\",\r\n\"contribute\",\r\n\"manipulate\",\r\n\"unanimous\",\r\n\"declare\",\r\n\"massive\",\r\n\"unique\",\r\n\"democracy\",\r\n\"narrate\",\r\n\"variable\",\r\n\"similar\",\r\n\"viewpoint\",\r\n\"violate\"\r\n];\r\n\r\nexport {dictionary};\r\n","import React, { Component } from 'react';\r\nimport Letter from './Letter';\r\nimport {dictionary as randomWord} from './dictionary';\r\nimport './Hangman.css';\r\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz';\r\nconst alphabetObject = alphabet.split('').map(item => ({letter: item, guessed: false}));\r\n\r\nclass Hangman extends Component {\r\n    static defaultProps = {\r\n        maxWrongGuesses: 6\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            guesses: alphabetObject,\r\n            word: randomWord[Math.floor(Math.random() * randomWord.length)].split(''),\r\n            guessValue: '',\r\n            errorMessage: '',\r\n            wrongGuesses: this.props.maxWrongGuesses,\r\n            victory: false\r\n         }\r\n         this.handleChange = this.handleChange.bind(this);\r\n         this.handleSubmit = this.handleSubmit.bind(this);\r\n         this.resetGame = this.resetGame.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let currGuess = this.state.guessValue.toLowerCase();\r\n        let result = this.state.guesses.find((item) => item.letter === currGuess);\r\n        let correctStatus = this.state.word.findIndex(el => el === currGuess);\r\n        if(result.guessed === false && correctStatus === -1) {\r\n            this.setState((prevState) => ({wrongGuesses: prevState.wrongGuesses -1}));\r\n        }\r\n\r\n        if(result && result.guessed === true) {\r\n            this.setState({errorMessage: 'You have already guessed this letter'})\r\n        } else if (result && result.guessed === false) {\r\n            this.setState((prevState) => ({\r\n                errorMessage: '', guessValue: '',\r\n                guesses: prevState.guesses.map(el => el.letter === currGuess ? {...el, guessed: true} : el)\r\n            }));\r\n        } else {\r\n            this.setState({errorMessage: 'Please input a valid character [A-Z]'})\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({guessValue: event.target.value});\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState({\r\n            guesses: alphabetObject,\r\n            word: randomWord[Math.floor(Math.random() * randomWord.length)].split(''),\r\n            guessValue: '', \r\n            errorMessage: '',\r\n            wrongGuesses: this.props.maxWrongGuesses,\r\n            victory: false\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let correctLetters = document.querySelectorAll('.Hangman-word-letter');\r\n        let word = '' \r\n        for (let i = 0; i < correctLetters.length; i++) {\r\n            const el = correctLetters[i];\r\n            if (el.innerText) {\r\n                word += el.innerText;\r\n            };\r\n        }\r\n        if (word === this.state.word.join('') && !this.state.victory && this.state.wrongGuesses > 0){\r\n            this.setState({victory: true});\r\n        }\r\n    }\r\n\r\n    displayHeading() {\r\n        return(\r\n            this.state.wrongGuesses === 0 ? \r\n            <h1 className=\"Hangman-list-description\" style={{color: 'red'}}>You lose, try again</h1> :\r\n            <h1 className=\"Hangman-list-description\">{this.state.wrongGuesses} incorrect guesses left</h1>\r\n        )\r\n    }\r\n\r\n    displayGuesses() {\r\n        return( this.state.guesses.map(item => item.guessed && <Letter data={item} />) )\r\n    }\r\n\r\n    displayForm() {\r\n        let lose = this.state.wrongGuesses === 0;\r\n        let win = this.state.victory;\r\n        return(\r\n            <form className=\"Hangman-guess\" onSubmit={this.handleSubmit}>\r\n                <label>Guess a letter <input type=\"text\" \r\n                    value={this.state.guessValue} \r\n                    onChange={this.handleChange} \r\n                    maxLength=\"1\" \r\n                    onKeyUp={this.handleKeyUp} \r\n                    disabled={lose || win}/>\r\n                </label>\r\n                <input type=\"submit\" value=\"Submit\" disabled={lose || win} />\r\n            </form>\r\n        )\r\n    }\r\n\r\n    generateWord() {\r\n        let lose = this.state.wrongGuesses === 0;\r\n        return(\r\n            this.state.word.map((l) => (\r\n                <div className=\"Hangman-word-letter\">\r\n                    { (this.state.guesses.find((item) => item.letter === l && item.guessed === true) && l) || (lose && <span style={{color: 'red'}}> {l} </span>) }\r\n                </div>\r\n            ))\r\n        )\r\n    }\r\n\r\n    displayGameOver(win) {\r\n        return (\r\n            win\r\n            ? <div>Congratulations, you nailed it! <button className=\"Hangman-reset\" onClick={this.resetGame}>Play again?</button></div>\r\n            : <button className=\"Hangman-reset\" onClick={this.resetGame}>Try again?</button>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div className=\"Hangman\">\r\n                { this.displayHeading() }\r\n\r\n                <ul className=\"Hangman-list\">\r\n                    { this.displayGuesses() }\r\n                </ul>\r\n\r\n                { this.displayForm() }\r\n                \r\n                {this.state.errorMessage && <div className=\"Hangman-error\">{this.state.errorMessage}</div> }\r\n\r\n                <div className=\"Hangman-word\">\r\n                    { this.generateWord() }\r\n                </div>\r\n                { this.state.victory && this.displayGameOver(true) }\r\n                { this.state.wrongGuesses === 0 && this.displayGameOver(false) }\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Hangman;","import React from 'react';\nimport Hangman from './Hangman';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Hangman />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}