{"version":3,"sources":["Letter.js","Hangman.js","App.js","serviceWorker.js","index.js"],"names":["Letter","className","this","props","data","letter","Component","Hangman","state","guesses","formatData","alphabet","word","split","guessValue","errorMessage","wrongGuesses","maxWrongGuesses","handleChange","bind","handleSubmit","map","item","index","guessed","event","currGuess","toLowerCase","result","find","correctStatus","findIndex","el","setState","prevState","preventDefault","target","value","onSubmit","type","onChange","maxLength","onKeyUp","handleKeyUp","l","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c153d4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Letter.css';\r\n\r\nclass Letter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"letter\">\r\n                {this.props.data.letter}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Letter;","import React, { Component } from 'react';\r\nimport Letter from './Letter';\r\nimport './Hangman.css';\r\n\r\n/*\r\n    TODO: Add gameover + winner messages\r\n    TODO: Add library of words + new game button\r\n*/\r\n\r\nclass Hangman extends Component {\r\n    static defaultProps = {\r\n        alphabet: ['a','b','c','d','e','f','g','h','i','j','k','l',\r\n        'm','n','o','p','q','r','s','t','u','v','w','x','y','z'],\r\n        maxWrongGuesses: 10\r\n    }      \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            guesses: this.formatData(this.props.alphabet),\r\n            word: 'apple'.split(''),\r\n            guessValue: '',\r\n            errorMessage: '',\r\n            wrongGuesses: this.props.maxWrongGuesses\r\n         }\r\n         this.handleChange = this.handleChange.bind(this);\r\n         this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    formatData(alphabet) {\r\n        return alphabet.map((item, index) => {\r\n            return {letter: item, guessed: false};\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        let currGuess = this.state.guessValue.toLowerCase();\r\n        let result = this.state.guesses.find((item) => item.letter === currGuess);\r\n        let correctStatus = this.state.word.findIndex(el => el === currGuess);\r\n        if(result && correctStatus === -1) {\r\n            this.setState((prevState) => ({wrongGuesses: prevState.wrongGuesses -1}));\r\n        }\r\n\r\n        if(result && result.guessed === true) {\r\n            this.setState({errorMessage: 'You have already guessed this letter'})\r\n        } else if (result && result.guessed === false) {\r\n            this.setState((prevState) => ({\r\n                guesses: prevState.guesses.map(el => el.letter === currGuess ? {...el, guessed: true} : el)\r\n            }));\r\n            this.setState({errorMessage: '', guessValue: ''});\r\n        } else {\r\n            this.setState({errorMessage: 'Please input a valid character [A-Z]'})\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({guessValue: event.target.value});\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"Hangman\">\r\n                <h1 className=\"Hangman-list-description\">{this.state.wrongGuesses} incorrect guesses left</h1>\r\n                <ul className=\"Hangman-list\">\r\n                    {this.state.guesses.map((item) => (\r\n                        item.guessed && <Letter data={item} />\r\n                    ))}\r\n                </ul>\r\n\r\n                <form className=\"Hangman-guess\" onSubmit={this.handleSubmit}>\r\n                    <label>Make a guess\r\n                    <input type=\"text\" value={this.state.guessValue} onChange={this.handleChange} maxLength=\"1\" onKeyUp={this.handleKeyUp} />\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n                {this.state.errorMessage && \r\n                    <div className=\"Hangman-error\">\r\n                        {this.state.errorMessage}\r\n                    </div> \r\n                }\r\n\r\n                <div className=\"Hangman-word\">\r\n                    {this.state.word.map((l) => (\r\n                        <div className=\"Hangman-word-letter\">\r\n                            { this.state.guesses.find((item) => item.letter === l && item.guessed === true) && l }\r\n                        </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Hangman;","import React from 'react';\nimport Hangman from './Hangman';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Hangman />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}