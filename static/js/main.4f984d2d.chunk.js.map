{"version":3,"sources":["Die.js","Diceroll.js","App.js","serviceWorker.js","index.js"],"names":["Die","className","1","2","3","4","5","6","this","props","number","Component","Diceroll","state","rolling","disabled","die1","die2","rollDice","bind","setState","rand1","Math","floor","random","rand2","setTimeout","button","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAqBeA,G,uLARP,OACI,yBAAKC,UAAU,OACX,uBAAGA,UAVG,CACVC,EAAG,kBACHC,EAAG,kBACHC,EAAG,oBACHC,EAAG,mBACHC,EAAG,mBACHC,EAAG,mBAIuBC,KAAKC,MAAMC,e,GAZ/BC,cCqCHC,G,kBAnCX,WAAYH,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTC,SAAS,EACTC,SAAU,QACVd,UAAW,GACXe,KAAM,EACNC,KAAM,GAEV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBATD,E,wEAWP,IAAD,OACPX,KAAKY,SAAS,CAACN,SAAS,EAAMC,SAAU,OAAQd,UAAW,YAC3D,IAAIoB,EAAQC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EACxCC,EAAQH,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAC5CE,YAAW,WACP,EAAKN,SAAS,CAACN,SAAS,EAAOC,SAAU,QAASd,UAAW,KAC7D,EAAKmB,SAAS,CAACJ,KAAMK,IACrB,EAAKD,SAAS,CAACH,KAAMQ,MACtB,O,+BAGH,IAAIE,EAAS,4BAAQC,QAASpB,KAAKU,SAAUH,SAAUP,KAAKK,MAAMC,SAAUN,KAAKK,MAAMC,QAAU,aAAe,kBAChH,OACI,yBAAKb,UAAW,WAAaO,KAAKK,MAAMZ,WACpC,kBAAC,EAAD,CAAKS,OAAQF,KAAKK,MAAMG,OACxB,kBAAC,EAAD,CAAKN,OAAQF,KAAKK,MAAMI,OACxB,yBAAKhB,UAAU,mBACV0B,Q,GA7BEhB,c,MCQRkB,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCKc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4f984d2d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Die.css';\r\n\r\nclass Die extends Component {\r\n    render() {\r\n        let classes = {\r\n            1: \"fas fa-dice-one\",\r\n            2: \"fas fa-dice-two\",\r\n            3: \"fas fa-dice-three\",\r\n            4: \"fas fa-dice-four\",\r\n            5: \"fas fa-dice-five\",\r\n            6: \"fas fa-dice-six\",\r\n        };\r\n        return (\r\n            <div className=\"die\">\r\n                <i className={classes[this.props.number]}></i>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Die;","import React, {Component} from 'react';\r\nimport Die from './Die';\r\nimport './Diceroll.css';\r\n\r\nclass Diceroll extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rolling: false,\r\n            disabled: 'false',\r\n            className: '',\r\n            die1: 1,\r\n            die2: 1\r\n        };\r\n        this.rollDice = this.rollDice.bind(this);\r\n    }\r\n    rollDice() {\r\n        this.setState({rolling: true, disabled: 'true', className: ' active'});\r\n        let rand1 = Math.floor(Math.random() * 6) + 1;\r\n        let rand2 = Math.floor(Math.random() * 6) + 1;\r\n        setTimeout(() => {\r\n            this.setState({rolling: false, disabled: 'false', className: ''});\r\n            this.setState({die1: rand1});\r\n            this.setState({die2: rand2});\r\n        }, 700);\r\n    }\r\n    render() {\r\n        var button = <button onClick={this.rollDice} disabled={this.state.rolling}>{this.state.rolling ? 'Rolling...' : 'Roll the dice!'}</button>;\r\n        return (\r\n            <div className={\"diceroll\" + this.state.className}>\r\n                <Die number={this.state.die1} />\r\n                <Die number={this.state.die2} />\r\n                <div className=\"diceroll-button\">\r\n                    {button}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Diceroll;","import React from 'react';\nimport Diceroll from './Diceroll';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Diceroll />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}