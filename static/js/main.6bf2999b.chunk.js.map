{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","className","this","props","light","number","onClick","handleClick","Component","Board","state","grid","createGridObj","bind","resetGame","boardGenerated","randomClick","row","col","Array","from","length","boardSize","map","el","index","obj","value","board","item","key","e","y","coords","arguments","Number","target","getAttribute","find","coordsArr","push","forEach","toggleLight","x","setState","prevState","checkVictory","victory","Math","floor","random","clicked","generateBoard","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bf2999b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Cell.css';\r\n\r\nclass Cell extends Component {\r\n    render() { \r\n        return ( \r\n            <div className={\"Cell \" + (this.props.light && 'on')} number={this.props.number} onClick={this.props.handleClick}>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Cell;","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport './Board.css';\r\n\r\n\r\nclass Board extends Component {\r\n    static defaultProps = {\r\n        boardSize: 5\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            grid: this.createGridObj()\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.resetGame = this.resetGame.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        !this.state.boardGenerated && this.randomClick();\r\n    }\r\n\r\n    createGridObj() {\r\n        let row = 0;\r\n        let col = 0;\r\n        let gridObj = Array.from({length: this.props.boardSize ** 2})\r\n            .map((el, index) => {\r\n                let obj = {value: index, light: false, row: row, col: col}\r\n                col++;\r\n                if (col>this.props.boardSize-1) { \r\n                    col=0; \r\n                    row++\r\n                }\r\n                return obj;\r\n            });\r\n            return gridObj;\r\n    }\r\n\r\n    generateBoard() {\r\n        let board = [];\r\n         this.state.grid.map((item, index) => (\r\n             board[index] = <Cell key={index} number={index} handleClick={this.handleClick} light={item.light} />\r\n         ));\r\n         return board;\r\n    }\r\n\r\n    handleClick(e,y) {\r\n        let coords;\r\n        if (arguments.length > 1) {\r\n            coords = {col: y, row:e }\r\n        } else {\r\n            let number = Number(e.target.getAttribute('number'));\r\n            coords = this.state.grid.find(item => item.value === number);\r\n        }\r\n        let coordsArr = [];\r\n        coordsArr.push([coords.row, coords.col]);\r\n        if(coords.col > 0) { coordsArr.push([coords.row, coords.col-1]) }\r\n        if(coords.col < this.props.boardSize-1) { coordsArr.push([coords.row, coords.col+1]) }\r\n        if(coords.row > 0) { coordsArr.push([coords.row-1, coords.col]) }\r\n        if(coords.row < this.props.boardSize-1) { coordsArr.push([coords.row+1, coords.col]) }\r\n        coordsArr.forEach((item) => {\r\n            this.toggleLight(item[0], item[1])\r\n        });\r\n    }\r\n\r\n    toggleLight(x,y) {\r\n        this.setState(prevState => ({\r\n            grid: prevState.grid.map((item) => (item.row === x && item.col === y ? {...item, light: !item.light} : item))\r\n        }), () => {\r\n            this.checkVictory();\r\n        })\r\n    }\r\n\r\n    checkVictory() {\r\n        let lightsOn = this.state.grid.find(item => item.light === true);\r\n        if (!lightsOn) {\r\n            this.setState({victory: true})\r\n        }\r\n    }\r\n\r\n    randomClick() {\r\n        this.setState({boardGenerated: true});\r\n        let numClicks = Array.from({length: Math.floor(Math.random() * 15) + 1});\r\n        numClicks.forEach(() => {\r\n            let value = Math.floor(Math.random() * this.props.boardSize**2);\r\n            let clicked = this.state.grid.find(el => el.value === value);\r\n            this.handleClick(clicked.row, clicked.col);\r\n        });\r\n    }\r\n\r\n    resetGame() {\r\n        this.setState(prevState => ({\r\n            victory: false,\r\n            grid: this.createGridObj(),\r\n            boardGenerated: false\r\n        }))\r\n        this.randomClick();\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"Board\">\r\n                <h1 className=\"Board-title\">Board</h1>\r\n                { this.generateBoard() }\r\n                { this.state.victory && \r\n                <div className=\"Board-victory\">\r\n                    <span className=\"Board-message\">YOU WIN YO</span>\r\n                    <button className=\"Board-reset\" onClick={this.resetGame}>Play again?</button>\r\n                </div> \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Board;","import React from 'react';\nimport Board from './Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}